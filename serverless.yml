---
service: aws-lambda-edge

frameworkVersion: '^1.33.1'

plugins:
  - serverless-finch
  - serverless-plugin-cloudfront-lambda-edge

provider:
  name: aws
  runtime: nodejs8.10
  region: ${env:AWS_DEFAULT_REGION, 'us-east-1'}
  stage: ${opt:stage, env:SERVERLESS_STAGE, 'test'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'ssm:GetParameters'
      Resource:
        - 'Fn::Join':
          - ':'
          - - 'arn:aws:ssm'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'parameter/app/${self:service}/${self:provider.stage}/*'

functions:
  app:
    handler: handlers/app.${self:provider.stage}Handler
    lambdaAtEdge:
      distribution: AppDistribution
      eventType: origin-request

custom:
  organization: ${ssm:/app/${self:service}/organization}
  domain: ${ssm:/app/${self:service}/domain}
  hostedZoneId: ${ssm:/app/${self:service}/hostedZoneId}
  certificateId: ${ssm:/app/${self:service}/certificateId}
  appDomain: ${self:provider.stage}.${self:custom.domain}
  assetDomain: ${ssm:/app/${self:service}/${self:provider.stage}/assetDomain}
  client:
    bucketName: ${self:custom.organization}-${self:service}
    distributionFolder: .bucket
    objectHeaders:
      ALL_OBJECTS:
        - name: Cache-Control
          value: 'public, max-age=31536000, immutable'

package:
  exclude:
    - '*/**'
  include:
    - 'handlers/*.js'
    - 'lib/*.js'

resources:
  Resources:
    AppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.organization}-${self:service}-${self:provider.stage}
    AppDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          Aliases:
            - ${self:custom.appDomain}
          ViewerCertificate:
            SslSupportMethod: sni-only
            AcmCertificateArn:
              'Fn::Join':
                - ':'
                - - 'arn:aws:acm'
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - 'certificate/${self:custom.certificateId}'
          DefaultCacheBehavior:
            TargetOriginId: AppBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            MaxTTL: 0
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
          Origins:
            - Id: AppBucketOrigin
              DomainName: { 'Fn::GetAtt': [ 'AppBucket', 'DomainName' ] }
              S3OriginConfig: {}
    AppRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        RecordSets:
          - Name: ${self:custom.appDomain}
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: { 'Fn::GetAtt': [ 'AppDistribution', 'DomainName' ] }
    AssetDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          Aliases:
            - ${self:custom.assetDomain}
          ViewerCertificate:
            SslSupportMethod: sni-only
            AcmCertificateArn:
              'Fn::Join':
                - ':'
                - - 'arn:aws:acm'
                  - Ref: 'AWS::Region'
                  - Ref: 'AWS::AccountId'
                  - 'certificate/${self:custom.certificateId}'
          DefaultCacheBehavior:
            TargetOriginId: AssetBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            MinTTL: 31536000
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: 'none'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
          Origins:
            - Id: AssetBucketOrigin
              DomainName: ${self:custom.client.bucketName}.s3.amazonaws.com
              S3OriginConfig: {}
    AssetRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        RecordSets:
          - Name: ${self:custom.assetDomain}
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: { 'Fn::GetAtt': [ 'AssetDistribution', 'DomainName' ] }
